import base64
exec(base64.b64decode('import base64
exec(base64.b64decode('aW1wb3J0IGJhc2U2NApleGVjKGJhc2U2NC5iNjRkZWNvZGUoJ2FXMXdiM0owSUdKaGMyVTJOQXBsZUdWaktHSmhjMlUyTkM1aU5qUmtaV052WkdVb0oyRlhNWGRpTTBvd1NVZEthR015VlRKT1FYQnNaVWRXYWt0SFNtaGpNbFV5VGtNMWFVNXFVbXRhVjA1MldrZFZiMG95UmxoTldHUnBUVEJ2ZDFOVlpFdGhSMDE1VmxSS1QxRllRbk5hVldSWFlXdDBTRk50YUdwTmJGVjVWR3ROTVdGVk5YRlZiWFJoVmpBMU1sZHJaRlppTUc5NVVteG9UbGRIVW5CVVZFSjJaREZPVmxwRmRHaFNNREUxVm14U1MxUXhSbGxSYms1aFZsZFNXRmxYZERCVFJrNTBZVWR3VG1KR1ZqVldSM1JPVFZkR1ZrNVlSbFppV0ZKb1ZtcEJNVTFzWkhKYVJscHBUVWM1TTFsclVtRlZNa1p5VjI1R1ZWWkZTbnBVVjNoclYwVXhXVlJ0ZEZkWFIxRXlWbFprZDFZeVJYaFRXR3hvVWtWd1lWbHNaRk5OTVd0M1drVjBXRlpyV2pGV01qRjNZVmRLUmxkdVZsaFdNMEpRVmtjeFRtVldWbkpoUjJ4VVVtdHdiMVpzVWs5aU1EVlhXa1prV21WcldtOVVWM1J6VGxaU1ZtRkZPVmhpVlhCWFZqSndZVmRIU2tkVGJVWlZWbFpaTUZVeFdsTmpWa1owWTBkc1YwMHlaRFJXYWtreFl6QTFTRlpzWkdwU2JYaFVXVmQwWVdGR1dYZFdWRUpyVFZkME5sZHJhR3RVYkVsM1RsUkdXbFpGY0hKV1ZWcDJaVlU1V0U1V1VsZFdWRlpFVmpKd1EyTXhTa2RTYkdoaFVsaENWRnBYTVROTmJGcEdXWHBHVlUxRVZsbFdSbWgzVm0xS1dXRklRbGRXUlhCeVdrWmFhMVpXVG5GVmJXeFRZbGhvWVZaVVJtcE5WbEpIVm14b1VGWjZWbFZXYkZVeFVURmtjVkZ1VGxOU2ExcFpWMnRXZDFVd01WWmpTSEJYVFdwR2VsVlVTa2RXTWtwSFlVVTVXRkpzY0c5V2FrSlhZekpTYzFSWWFGWmliSEJWVkZWa05GSldWbGRhUjNSVVlrVldNMVZ0TURGV1JscFdUbFZPV0dGclNucFZhMXBIWkZad1NHTkhiRmROTW1RMFZqSjBWMVF5U25SVGJrcHFVa1phWVZSVmFGTlRNVlpWVVd0a2FXSkZOVmRXUjNSTFdWVXhTR1ZGVmxaV2VrWlFWa2Q0UzFKck1WVlhiR1JPVFRCS1NGWkhjRUpsUlRWelZXeFdZVkpVYkZSVmJGWjJaREZhZEdSR1pGUk5iRW93VlRKNGIxWkdXWGxWYkZaWFltNUNXRnBGV25OV01XdzJVbTF3VTAxVmNFcFdiVEF4WXpGV1JrMVdiR0ZTUlRWV1ZqQm9RMVZHWkZoak0yaFhWakF4Tmxrd1ZURmlSMHB5VFZST1YxSnNXbkZhUkVaT1pESktSbFZzU2xkTmJFcE1WbFpTUTFJeVNuTlViRnBWWVRBMVdGWnFRbUZUVm14eVlVaGtWR0pGY0hsVWJHaEhWMnN4Y1ZKdWNHRlNSWEJVVld0YVIyUldSblJqUjNoWFZsYzVNMVpxUm1GaE1WVjVVMnRhYVZKV2NGVlpWM2hoVXpGV2MxVnVUbFJXYkZwNFZXMDFTMVpGTVVobFJWWldWbTFTY2xVeWVFWmtNVXAwVGxaU1YxWlVWa1ZYVjNCTFZURk9WMVp1Vm1GU00wSnpXV3hTY21WV1drWlZhM1JvVFdzMVNWWlhkRzloUmtwR1YyMUdXbFpzU2xoWk1WcHpZMVpPV1ZwSGRHbFdWM2N4VmpKMGFrMVhTa2RYYTFwT1ZrVTFWbFp0ZUV0VE1WWTJVV3M1YWxKcldsbFhhMVozVldzeFJsZHVWbFpOVmxwUVZWZDRkbVZHWkhKWGJGSnBZa2hDZDFadGNFTmpNa3B6VlZoc2FFMHlVbWhVVjNSaFUyeGFXR05GVG1oaVJUVkhWRlZTUzFaV1RraGpla1phWWxSR1NGWXhXbGRrUlRsWVpFWmtUbEl6WkRSV2FrWlRVMnMxV0ZWcldtdE5NbWhYV1d4U2MyRkdXblJqZWtaT1RWZFNlbGRyV210aFJURllWV3RXVlUxV2NGaFdWekZMVmxkS1JWRnNhRmROYkVsNVZqSndRMk14U2tkU2JHaGhVbGhDVTFSVlZtRmtWbFY0Vm0xR1ZrMVZWalZWTVdoelZHeFplV1ZGZEZaaVIxRXdWbFZhVjJSSFVrbFViRlpPVmxSV1dWWnNaREJaVmxwMFVteGFWR0pHV2xkV2ExWmhWRVpWZVdWR1pGTk5WbHBaVjJ0YVEyRkdXa1pUV0dSWFZsZFNlbFZVU2twbFZsWnlZa1phYVdKV1NuaFhiR04zVGxVeGMxVnJWbFJpV0ZKeFZXcEdTMU5XYkZaVmEyUllZbFZhVmxadE5VZFhiVVp5WWtST1lWSjZSa3RhVmxwM1UwVTFXR1ZHWkZOV1JWWTJWbXRhWVZVeFRuUlZiazVZWVRGd1ZWbHRlSGRqUmxweFVXNU9UbEpzVmpSWFdIQkhZVlpaZDFkc2JGVmlSMmhFV1ZSR1NtVkdaSEZXYkVwT1lsWkplVll5Y0VOak1VcEhVbXhvWVZKWVFsTlVWVlpoWkZaVmVGWnNaR3ROYkVvd1ZXMTRiMVF4U1hsVmJHaFdZa1phTTFSWGVITmpNWEJHWTBkR1RsWlhkekpXVkVreFdWZEZlRnBGV2xOaVZGWldWRmN4TUUweGNFWldhbEpYVmxSV1NWZHJaRzlXUmtweVlrUk9XRlpGU25aV1IzTXhZMjFXUlZac1FsZE5ibWgyVm1wQ1lWSXdNVmRhU0VwYVpXeEtjbGxzVlhoT2JGWllUVlJTV2xac2JEUlZNVkpEVjBkR2NtTkljRlZXVmxwUVdUQmFSMWRHY0VaalJrcE9VbFp3TVZaVVJsZFVNVVp6WWpOb1dGZEhlRzlWYWtwdlkyeFZkMVpVUmxKTlYzUXpXVlZXUzFsVk1WZFRiR3hYWWtkU2NsWlZaRWRXVmtaeFVXeFdVMkY2UlhwWGExWlhUa1phVms1VmFHRlNNMUpQV1ZSR1dtVkdaRmhsUjNSWFlsWktlVnBGVW1GaFJUQjVZVVpHVm1FeFdubFVWbHBTWlVaV2NrNVZOVmRXUmxWNVZtdGFiMlF4VW5OaU0yeFFWbGhvVTFSWE1UUlJNV1J4VVc1T1UxSnJXbGxYYTFaM1ZXc3hSbGR1VmxabGEyOTNWa1JHWVdNeFduVlViRkpvVFZoQ1YxZFhkR0ZUTVZKelYxaG9WV0V3TlZaVVZscEhUa1phVjFwSGRGZE5SRVpHV1d0YVUxWnRWbkpUYm5CWFVrVmFURlJzV2tkamJIQkhWbXMxVjFZemFERldiRnBUVVRGSmVGVnNaRlpoTWxKV1ZqQldZVlJHY0ZkYVJUbHJWbXN4TkZWdE5XRldSVEZJWlVWV1ZsWnRVbkpWTW5oR1pERktkRTVXVWxkV1ZGWkZWMVpqZUZOdFZsZFdibEpzVW0xNFQxUlZhRU5sYkdSVlVtMDVWMDFyTlVsV1J6VlRWakpLV1ZWc1NsZGlSbkF6V1dwR2MyTnRSa1pQVjJ4VFZsUldNMVpXV210aE1VNXpVbGhrVTJKVVZsVldiRlV4VVRGa2NWSnVaRlJTYkhBd1ZGWldkMVV3TVVWV1dHeFhUVzVTY2xadE1VcGxWbEpaWTBaYWFXSllhSFpXYlRWM1ZqSlNWMWRyV21GU2JWSnlWbTB3TlU1c1dsaE5SRlpXVm14d1IxUldVazlXUlRGWFUycEtWbVZyU25wVmExcEhWMFp3Um1OR1NrNVNWbkF4VmxSR1YxUXhSbk5pTTJScFVsWktVMVpxU2xOVE1WWlZVV3RrYVdKRk5WZFdSM1IzWVVaYVdHVkliRmhoTWxFd1dWWmtTMVl4WkhGV2JHaFhZbGRvVlZkWGRGZGpNVTVIVTJ4b1lWSXpRbkJXYkZwMlpVWlplV1JIY0U5V01VcEhXV3RXYzFaWFJuSlRia1phWWtkUk1GUldXbXRrVjBwR1ZHMTBhVk5GU2pOV1ZtTXhWREZzVjFwRlpGUlhSMUpaV1d0a2IxUkdjRmhrU0U1VVVtdHdNVlp0TVVkVmF6RkdZMGhzV0Zac2NISlpWRXBQVTBaV2NtSkdWbGROYkVwTVYxWmFWMk15VGtkU1dHeHBVbFZ3YUZSVlpEUlNWbFpYV2tkMFZHSkZWak5WYlRBeFZrWmFWazVWVGxoaGEwcDZWV3RhUjFkR2NFWmpSa3BPVWxoQk1sWnFTalJpTVZWM1RWVmthbEp0ZUZWWmJUVkRWVEZhZFdOR1pHcGlSbHA1VjJ0b1QyRlhTbFpYYkhCWFZucFdNMVV5ZUV0U1ZrWjBUbFp3YkdGNlZsVlhiRnByVWpGa1JrNVdhRTlXVkVad1ZteGFkazFzV1hoVmEzUnFUV3MxU0ZkcVRuTmlSa2w2WVVoS1ZrMUdjRXhaZWtaeVpWVTFWazVYUms1VFJrVjRWbFpqTVdReVJYaFVhMXBxVTBkU1lWbHNVa2RqVm5CSFYyNWtWRkl3Y0VsVWJHUnZWMFpLY21KNlNsWldSWEI2VlZkNGRtUXlTa1pWYkVwWFRXeEtURlpXVWtOU01rcHpWR3hhVldFd2NHaFVWV1EwVWxaV1YxcEhkRlJpUlZZelZUSndWMWRIU2toaFJsSlZWbTFTVUZwRlZURlRSbkJHWkVkNFYwMUVValJXTVZwcVpEQTFXRlJyYUZSaWEwcHZWVEJrTkZsV1duVmpSbVJxWWtkNGVGVXhhR3RoTVZwMFpFUldXbFpYYUdoWlZWcGFaREExV1ZSc1VrNVNNVVYzVjFkMGExVXhUbGRXYmxKc1VqTkNjRmxZY0ZkU1JtUllUVWhvVmsxVmNGbFZiWGh2V1ZaT1JsTnVTbFpOUmxZMFdrUkdUMVpzY0VoU2JYUnBWbFJXTTFaV1l6RlJNVTV6VTFoc2JGSkZXbFZXYkdSdlZFWnNWbHBGZEd0U2JrSkpXbFZXTkZaR1NsVlZhazVZVmtWc05GbDZTbE5XTWtsNldrZDRVMDB5YUhkWFYzaHJWVzFSZUdKR1dsVmlhM0J4Vld4Vk1XUXhWbGRhUjNSVVlrVldNMVZ0TURGV1JscFdUbFZPV0dGclducFdNRnBMVmxkS1IyTkZOV2hpV0dnMVZtcEtORlF5U25SVWExcFZZbXRLVTFacVNsTlRNVlpWVVd0a2FXSkZOVmRXUjNSTFdWVXhXVkZ1WkZaV2JFcDZWVEo0UzA1dFNrVlViR2hwVWpBeE0xZFhjRU5qTWs1WFUyeHNWMkpZVWxWVmFrcHJUVEZWZUZwSVRrNU5hMXBaVmxkd1YyRnJNWFJsUlRGWFZtMU5NVmx0ZUU5V2JGSnlVMjFHVGxJemFFWldWbHByWVRGT2MxTllhR2xTUlZwb1ZXdFZNVlJHYTNkYVJrNVVVbXh3V1ZReFduZFdNREZIVjJwT1ZsWkZjSHBWVjNoMlpESktSbFZzU2xkTmJFcE1WbFpTUTFJeVNuTmFTRkpvWld0YWIxbHNWbmRUVmxGNFlVaGtXbFpzVmpWWGEyaHJWV3N4ZEdWRlRsaGhhMHA2Vld0YVIxZEdjRVpqUmtwT1VsWndNVll4VWtwTlZsbDVWV3hrVW1KR1NsTldibkJYV1ZaU1ZWSnRSazlXYlhoNVZrZDBTMkV4U25KalNIQmhVa1ZyZUZkV1pFdFhSMVpKWTBab2FWSnJXVEJXVmxwV1pVWmFSazVXVmxKaVdHaFZWVzEwZDJOV1ZYbE9XRTVTVFd0c05WWlhkSE5XYlVwMFZXeEdXbFpzU25aVVYzaFRWbTFHU0U1WGRFNVRSMmQ0Vm10a2QxRXhUbk5UYTFaV1lsUldWbFp0Y3pGalZsWTJVVzVPVTFKcldsbFhhMVozVldzeFJsZHVWbFpOVmxwUVZWUktVMlJHVW5GV2F6bFlVMFZLZWxacVFsWk5SMUY0V2toT1drMHlVbkJVVjNNeFRWWmFkRTVXWkZWU2JGcFpWREZqTVZaR1dsWk9WVTVZWVd0S2VsVnJXa2RYUm5CR1kwWk9UbFl6VFhoV1ZFWlhZV3MxV0ZWWWFHcFNiV2hRVlc1d2MxTXhiRmhrUm1ScVVteEtSMVpIZERCaVJscFlaVWhrV2xaRlNYZFZNbmhHWkRGS2RFNVdVbGRXVkZaRVZqSndRMk14U2tkU2JsWlZZbGRvV0ZwWGVFWk5WbGw1VFZoS1RsWXhXbGhaTUZwdlZUSktXVlZyTVZaV1JXOTNWa1ZhVDFac1VuSlRiVVpPVWpOb1JsWldXbXRoTVU1elVsaGtWR0ZyY0dGVVZFcDZaVVp3V0UxV1pGaFdiRXA0VlZjeFIxWXlWbkpUYWtwV1RXNUNVRlY2U2xOU2JVcEdWV3MxVjJWcldreFdWM1JYVmpBeFYyTkZXbWhTZW14UFZXeGtORkpXV1hoWk0yaFVZa1UxUjFrd1VrTldSbHBXVFZSU1dtSkdXbnBWYkZwTFYwVTFWbVZHV2xkbGJYZ3hWbFJHVjFReFJuTmlNMlJwVWxaS1UxWnFTbE5UTVZWM1ZtdDBUMVp0ZUZoWFdIQkhWR3hLV1ZWcmNGWk5ia0pJV1Zaa1IxZEhVa1psUmxKWFZsUldSRll5Y0VOak1VcEhVbXhvWVZKWVFsTlVWVlozVFVaYVNHVkZPVkpoZW14WFdXdFdiMVZHWkVoVmJXaFhZbTVDVkZwSGVFOWtWMFkyVW0xb2FWWldjRXBXYlRCNFpESkdTRlpzVmxkaGEzQlpXVmQwZDJOc1VuTldibVJQVmpGR05WUnNXbmRXYXpCM1RsUkdWbVZyV2toYVIzaDJaREpLUmxWc1NsZE5iRXBNVmxaU1ExSXlTbk5VYkZwaFUwVTFjRlpzWkRSU1ZteFdZVVU1V2xac2J6SldWelZoVjBkS1dWRnNaR0ZTYlZKUVdrVmFZV1JIUmtoU2JFNU9UVzFuZWxZeFkzZGxSbGw1Vm01S2ExSldTbTlVVkVKTFZFWmFjbFp1U2s5V2JGcElWbGQwUzJGc1NsVmlTRlphWVd0d2NsVXllRVprTVVwMFRsWlNWMVpVVmtSV01uQkRZekZLUjFKc2FHRlNXRUpUVkZWV1lXUldWWGhXYXpsU1lrYzVORmxVVG5OVlJsbDZWVzFvVjJKWVFucFViRnByWXpKR1JscEZOVmROUm5CaFZsUkplRTVHYkZkVGExWlRZa1p3WVZSWGNGZFhSbXh5Vm1zNWFsSnJXbGxYYTFaM1ZXc3hSbGR1VmxaTlZscFFWVmQ0ZG1ReVNrWlZiRXBYVFd4S1RGWldVa05TTWtwelZHeGFWV0V3TlhCVmFrSjNUVlphV0UxVVVtaGlWWEJHV1d0b1IxZHRSbkpqUmxKYVlURndSRlpyV2s5WFIwcEdWVzFvVjFaV2NERldWRVpYVkRGR2MySXpaR2xTVmtwVFZtcEtVMU14VmxWUmEyUnBZa1UxVjFaSGRFdFpWVEZJWlVWV1ZsWjZSWGRYVmxwYVpVZEtTRTVXY0doTmJFbzJWMnRhYTFJd05WaFNhMnhxVWpOU1ZWVnNhRU5OTVdSWVRVaG9hRTFXU2xoWk1GcHZWREZhTmxadVNsWmhhM0J4Vkd4YVUyUkhTa2xUYXpsb1RVUldNMVpXV210aE1VNXpVbGhrVTJKVVZsVldiRlV4VVRGa2NWRnVUbE5TYTFwWlYydFdkMVZyTVVaWGJsWldUVlphVUZWWGVIWmtNa3BHVld4S1YwMXNTa3hXVmxKRFVqSktjMVJzV2xWaE0wSnZWbXhrTkdWV1pISmFSRkpvVmpCd1dGWXljRmRYUmxwMFlVWlNXbUV4V25wVk1GcExWMFp3U0dOSGJGZFdiVGswVm1wS01HRnJOVmhWYTFwcFVsZDRWbGxYZEV0alZteHpXa1JTVGxadFVqRlphMVpQWVRKS1NWRnVaRlpXZWxaUVYxWmFhMUl4VGxsYVJtaHBVakpvVFZkc1pEQmpNVTVIVTI1V1YySlZXbE5VVlZaM1pWWmtWMWR0ZEdoTmF6VkpWbGQwYzFaV1dYbFZhM1JhVm14YWVsa3dXa1psVjBwR1UyMUdUbEl6YUVaV1ZscHJZVEZPYzFKWVpGTmlWRlpWVm14Vk1WRXhaSEZSYms1VFVtdGFXVmRyVm5kVmF6RkdWMjVXVmsxV1dsQlZWM2gyWkRKS1JsVnNTbGROYkVwTVZsZHdUMkl5VFhoalJWcG9VbXMxY0ZWcVFURk5WbHBJWkVWMGFGWXdjRmhWTW5SaFYyeGFkRlZ1U2xwTlIxSlVWVEZhVTFkR2NFZFNiRnBPVWxjNGVWWXlkRmRpTVUxNVZHdG9WR0pzU21GVVZFWmhXVlpaZDFaVVJtcFdiWGhZVjJ0b1QxbFhTbFpqUld4WFlsaENSRmxVUmtwbFJtUnhWbXh3VGsxdWFFUlhWRW93WXpGT1YxVnVSbEppV0VKd1ZtcE9ibVZHV1hsT1dFcE9WakJXTlZWdGVHOVpWazVHVTI1S1ZrMUdWalJXUlZwUFZteFNjbE50Ums1U00yaEdWbFphYTJFeFRuTlNXR1JUWWxSV1ZWWnNWVEZSTVdSeFVXNU9VMUpyV2xsWGExWjNWV3N4UmxkdVZsWk5WbHBRVlZkNGRtUXlTa1pWYkVwWFRXeEtlRmRYZUdGWGJWRjRZMFZrYUZKWVVuSldiR1EwVWxaa1ZWTlVSbFZXTUhCYVZWZHdTMWRzV25SVVdHUmFZV3R3VUZwRldrdGtWbHAwVW14T2JHSllaRE5XYTFacVpVWlJlVk5ZYkZSWFIzaHdWV3BPUTJGR1dsVlRiVGxzWWtkU2VsbFZXazlVYkVwMVVXeHdWazFxVmpOV1YzaGhUbXhhZFZOc1dtaE5iRW8yVjFjd2VGSXhaRmRXYmxacVVsaG9WMVJWVm5kTlJtUllZMFU1VkdKSE9UVlZiWGhUVlcxS2NsTnVRbHBXYkZwTVZHeGFhMVl4YkRaU2JXeHBVMFZLVmxkV1ZtOWtNa1Y0Vkd0YWFsTkhVbUZaYkZKSFkyeGFSMWR1WkZoU1ZGWlpWR3hrTUZVd01YUlZhazVXWld0YVNGcEhlRTVrTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZWa05GSldWbGRhUjNSVVlrVldNMVZ0TURGV1JscFlZVVYwVlUxWFVreFZNR1JMVTFaYWRHRkhlRmROYkVsNlZsWlNTMk14Um5OaU0yUnBVbFpLVTFacVNsTlRNVlpWVVd0a2FXSkZOVmRXUjNSTFdWVXhTR1ZGVmxaV2JWSnlWVEo0Um1ReFRuUlBWbHBUWVhwV2VWZFhjRXRWTVU1WFZtNVdZVkl6UW5OWmJGSnlaVlphUmxWcmRHaE5iRVkxVlRKMGIyRldUa2RYYlRsVlZrVkdORlJXV25OV01XdzJVVzEwYVZJemFHRldWbU14VVRGV1ZrMVlTbGhoYXpWaFZtMTRSMDVHYkZaV1ZGWlhWbXRhTUZrd1duZFdNVXB5WTBoa1YwMVhhRE5XVnpGWFVtczVWMVp0YkZOTk1FcFFWMVprTkdNd05WZGFSbWhxVWpCYWIxWnNVbFpOYkdSeVdraE9XR0pHY0VkVWJHTTFWbFV4U0ZWc1RsVmhNVlY0VmpCYVQxWldTbkpPVlRWcFVsWldNMVpyV21wbFJrNXlUVlZrYVZKc1dsaFdhMXBMVkVac2RHVkhSazlXYlhoNVZsWm9hMkZYUlhwVWFsWmhWbGRvUkZsV1pFZFhWbEoxVm14U2FWWkZXa2xYV0hCTFVqRmtSMU51Vm1wU2ExcFhWRmR6TVU1V1pGVlRiWFJyWWtjNU0xbHJWbE5WYkZsNVZXdDBWbFpGU2toWmJYaFBWbXhTY2xOdFJrNVNNMmhHVmxaYWEyRXhUbk5TV0dSVFlsUldZVlJYY0VkWFJuQldXa1pPV0ZKc2NERlpNR1F3VldzeFJsWlVSbFpOVmxwMlZYcEtTMU5HVW5OaVJtUnBWMGRvZUZaR1VrZFRNRFZ6Vld0b1RsWXpVbkJWYWtaTFVsWnNWbHBIT1ZWU2JGcFpWREZqTVZaR1dsWk9WVTVZWVd0S2VsVnJXa2RYUm5CR1kwWktUbEpXY0RGV1ZFWlhWREZHYzJJelpHbFNWa3BUVm1wS1UySXhXbkZTYms1cFlrVXhNMWxWVmpCaFZrbDNUbFp3VjJKVVJUQlpWM04zWlVaS2NWSnNjR3hoZWxaVlYxWldhMVV4VGxkWGJsWnFVbTE0VDFsWWNGWmxWbGw1WkVkMFYySlZOVWRaYTFaWFZHeEtTR1ZGZEZaaE1WcDZWRlJHVTFac1ZuVlhiRkpPVWpOb1JsWldXbXRoTVU1elVsaGtVMkpVVmxWV2JGVXhVVEZrY1ZGdVRsTlNhMXBaVjJ0V2QxVnJNVVpYYmxaV1RWWmFVRlZYZUhabFZsWnpZa1pTYVdGNlZsTldiRkpMVlRKU2MyTkZXbWhTYXpWeVZGZHpNRTFzYkhGVWJVWlZWbFJHTUZaWGNFOVhiVVY1Vlc1d1lWSnRVa2RhVjNoVFYxWmFkR0ZHWkd4aVJXdzFWbFJKTVdNd01VaFdiRnBWWW10S1UxWnFTbE5UTVZaVlVXdGthV0pGTlZkV1IzUkxXVlV4U0dWRlZsWldiVkp5VlRKNFJtUXhTblJPVmxKWFZsUldSVmRYZEd0VE1VNVhWVzVTYkZKWVFsUlZibkJ6VkZaVmVGWnJPVkppUnpreldXdFdVMVZzV1hsVmEzUldWa1ZLU0ZsdGVFOVdiRkp5VTIxR1RsSXphRVpXVmxwcllURk9jMUpZWkZOaVZGWmhWRlZrYjFSR2EzZGFSWFJyVm14YVdWUXhWakJVYkZwelkwWldWMkV4V2xCVlZFWktaVWRLUjJGSGJGUlNWRlp2Vm0xd1IxSXlVbGRVV0doVFlteHdWVlJWWkRSU1ZsWlhXa2QwVkdKRlZqTlZiVEF4VmtaYVZrNVZUbGhoYTBwNlZXdGFSMWRHY0VaalJrcE9VbFp3TVZaVVJsZGhhelZZVm01S2JGTkdXbFpaVjNoaFkxWlNWVkpyZEdwTlYzaDZWa2N3TVdGWFNraGtSRlpoVmxkUk1GWXllR3RTYlVwSlZXeFNhVlpGV205WFZFSmhaRzFXV0ZacmFHeFNNMUpUVkZWV2QxVnNXbGhqUlU1b1RWZFNlVmt3VWxkaFJURkpWV3QwVmxaRlNraFpiWGhQVm14U2NsTnRSazVTTTJoR1ZsWmFhMkV4VG5OU1dHUlRZbFJXVlZac1ZURlJNV1J4VVc1T1ZGSnJOVEJaVldSellWWmFSMWR1Y0ZoV1JYQjZXVzB4VDFKc1VuUk9WMnhPWWxaS1RGWldVa05TTWtwelZHeGFWV0V3Y0doVVZXUTBVbFpXVjFwSGRGUmlSVll6Vlcwd01WWkdXbFpPVlU1WVlXdHdVRlV4V2s5a1ZrWjBZa2RzYVZKV2IzbFdWRWt4WXpKR2RGTnVTbFZpVkZad1ZGY3hVMU14VmxWUmEyUnBZa1UxVjFaSGRFdFpWVEZJWlVWa1YxWXpRa2hYVmxwV1pERk9jMWRzY0dsaVdHaEZWbFJHWVdReFpFZFRia1pVWWxob1YxUlZWbmRVTVdSWVkwVjBVMDFyVmpWV1IzQlhWVzFLU0dGSGFGZFdSVXBNVmxWYWEyTXhjRWRhUjJoT1VqTm9TVlpzWXpGWlZrNXpVMjVPYWxORk5XRlVWM0JIWld4c2MxcEdaRmRTYTFwNFZWY3hiMVV3TVVkaVJFNVdUVlphY2xsNlFYaFRSbEp4Vm14S2FXSkdjSGRXUmxKSFVqSktjMXBHWkZWaE1EVlhWRmQwYzA1V1ZYbE9WMFpvVFZWV00xVnRkRFJXUmxwV1RsVk9XR0ZyU25wVmExcEhWMFp3Um1OR1NrNVNXRUpVVmpGa01HRXhXWGxTYTJoVlYwZDRXRlpxU2xOaFJsSllZMGM1YVdKR2NIbFhXSEJUV1ZVeGMxTnJiRnBXVjJoRVdWY3hWMVpzVG5WalJuQlhZbFV4TkZkVVNqQmpNVTVYVm01V1dHRXpRbFJVVjNoTFpXeGtjbFpyT1ZKTlJFWkpWVzEwYjFZeFdYbFZiRTVWVmpOQ2Vsa3llR3RqTVZKeVUyczVhR1Z0ZURSWFZ6VjNXVlpTVjFacVdsSmhhMHBYVldwSk5HUXhaSEZSYm1SUFZtMTBOVlJzVmpSVWF6RlhZbnBHV0ZZelVsQlpNbmhPWkRKS1JsVnNTbGROYkVwTVZsWlNRMUl5U25OVWJGcFZZVEJ3YUZSVlpEUlNWbFpYV2tkMFZHSkZWak5WYlRBeFZrWmFXR0ZJU2xwaGEzQklWakJrVjFOSFZrWmpSazVwVWxjNGVGWXlkR0ZoTVZweVRsaEtWV0pyU2xOV2FrcFRVekZXVlZGclpHbGlSVFZYVmtkMFMxbFZNVWhsUlZaV1ZtMVNjbFV5ZUVaa01VcDBUbFpTVjFaVVZrUldNbkJEWXpGS1IxSnNhR0ZTV0VKVVZGYzFiMDFHVlhoV2JYUlhUV3hLV1ZaWGRHOVdNa3AwWlVad1ZWWXpUWGhVVjNoclkyeHdSMWRzUWxkaE1IQmFWbGN3ZUdJeFZrZGlNMnhRVm5wV1ZWWnNWVEZSTVdSeFVXNU9VMUpyV2xsWGExWjNWV3N4UmxkdVZsWk5WbHBRVlZkNGRtUXlTa1pWYkVwWFRXeEtURlpXVWtOU01rcHpWR3hhVldFd2NHaFVWV1EwVWxaV1dFNVhSbWhpVmxwV1ZtMXdZVmxXV25SaFJrSlZWbFp3TTFZd1ZYaFRSVGxXWTBkc1YxWkdXVEpXYWtvMFlURkplVlpzV21sVFJVcHZWRlZvVTFNeFZsVlJhMlJwWWtVMVYxWkhkRXRaVlRGSVpVVldWbFp0VW5KVk1uaEdaREZLZEU1V1VsZFdWRlpFVmpKd1EyTXhTa2RTYkdoaFVsaENVMVJWVm1Ga1ZsVjRWbXM1VW1KSE9UVlZNV2gzVmxaa1IxZHVSbFZXUlc4d1ZHMTRkMUpzY0VkYVIzUlRWMFpLUmxZeWRHcGxSMFpIVjFoc1ZtSnVRbGxaYTJSdlZURmtjVkpzU210TldFSkhXVlZhYjFack1YSk9WRTVXVmtWd2VsVlhlSFprTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZWa05GSldWbGRhUjNSVVlrVldNMVZ0TURGV1JscFdUbFZPV0dGclNucFZhMXBIVjBad1JtTkdUazVUUlVveVZqRmpkMlF3TVZoVGEyaFZZbXRLYUZSVVFrdFNWbXhYVm10a2FXSkZOVmRXUjNSTFdWVXhTR1ZGVmxaV2JWSnlWVEo0Um1ReFNuUk9WbEpYVmxSV1JGWXljRU5qTVVwSFVteG9ZVkpZUWxOVVZWWmhaRlpWZUZack9WSmlSemt6V1d0V2MxVnRTblJsUnpsWFltNUNWMXBFUms1a01WSnlaRVpPVTAxSGR6RldiR040VGtaT2MxTnNXbGhpYTFwWlZtdFdkMWRHY0VWVGJFNVVVbXh3TUZwRlZuZFZhekZJWlVST1ZsWkZjSHBWVjNoMlpESktSbFZzU2xkTmJFcE1WbFpTUTFJeVNuTlViRnBWWVRCd2FGUlZaRFJTVmxaWFdrZDBWR0pGVmpOVmJUQXhWa1phVms1VlRsaGhhMHA2Vld0YVIxZEdjRVpqUms1T1VrWldOVlpxU2pCaE1WbDRZMGhTVldKc1NsaFpiVEZ2WTJ4YWNWTnFVazlXYlZKNlYydGFTMVZHV25KalJFSldZbFJXVUZsWGMzaGpNVnB5WlVaU1YxWlVWa1JXTW5CRFl6RktSMUpzYUdGU1dFSlRWRlZXWVdSV1ZYaFdhemxTWWtjNU0xbHJWbE5WYkZsNVZXdDBWbFpGU2toWmJYaFBWbXhTY2xOdFJrNVNNMmhHVmxaYWEyRXhiRmhTYms1WFlXdGFhRlZyVlRGVVJtdDNXa1pPVkZKc2NGbFVNVlozWVVkV2RHVkZjRmRXTTBKSVdYcEdjbVZXVG5WUmJGSllVbFZ3UmxkV1dsZFNNa3B6Vkd4YVZXRXdjR2hVVldRMFVsWldWMXBIZEZSaVJWWXpWVzB3TVZaR1dsWk9WVTVZWVd0S2VsVnJXa2RYUm5CR1kwWktUbEpXY0RGV1ZFWlhWREZHYzJJelpHbFNWMmhaVm10V1lWUnNiSE5XVkVac1lrZDRlRlpIY3pWaFZrcFpWV3RXV2xaRlNYZFZNbmhHWkRGS2RFNVdVbGRXVkZaRVZqSndRMk14U2tkU2JHaGhVbGhDVTFSVlZtRmtWbFY0Vm1zNVVtSkhPVE5aYTFaVFZXeFplVlZyZEZaV1JVcElXVzE0VDFac1VuSlRiVVpPVmpObmVGWlVTWGhPUm1SelYxaHdWV0V6YUZWV2JGVXhVVEZrY1ZGdVRsTlNhMXBaVjJ0V2QxVnJNVVpYYmxaV1RWWmFVRlZYZUhaa01rcEdWV3hLVjAxc1NreFdWbEpEVWpKS2MxUnNXbFZoTUhCb1ZGWm9RMWRXY0ZaaFNHUmFWbXhXTTFWc1VrdFZhekYwWlVWT1dHRnJTbnBWYTFwSFYwWndSbU5HU2s1U1ZuQXhWbFJHVjFReFJuTmlNMlJwVWxaS1UxWnFTbE5UTVZaVlVXdGthV0pGTlZkV1IzUkxXVlV4U0dWRlZsWldiVkp5VlRKNFNtVlhWa2xWYkZKWFZqRktVVmRyWkRSa01VNUhWMjVTV0dKWVFuQldiWGgyVFVaa2NsZHRkR3BOYkZwWVdUQmFiMVpzV2tobFJrcFhZa1p3TTFscVJuTmpiVVpHVDFkc1UxWkhlREZYVjNCTFlURk9jMUpZWkZOaVZGWlZWbXhWTVZFeFpIRlJiazVUVW10YVdWZHJWbmRWYXpGR1YyNVdWazFXV2xCVlYzaDJaREpLUmxWc1NsZE5iRXBNVmxaU1ExSXlTbk5VYkZwVllUQndhRlJWWkRSU1ZsWlhXa2QwV0dKVmNIbFpNR2hQVjBaYWRGVnFXbFpsYTBwNlZXdGFSMWRHY0VaalJrcE9VbFp3TVZaVVJsZFVNVVp6WWpOa2FWSldTbE5XYWtwVFV6RldWVkZyWkdsaVJUVlhWa2QwUzFsVk1VaGxSVlpXVm0xU2NsVXllRVprTVVwMFRsWndhR0Y2VmxCWGExcHJWRzFXZEZOcmJHcFNNMUpVVkZaYWRtUXhWalpSYXpsVVRXdGFNRlV5ZEc5V01rcFlZVWhHV2xac1ducGFSRVpHWlZkS1JsTnRSazVTTTJoR1ZsWmFhMkV4VG5OU1dHUlRZbFJXVlZac1ZURlJNV1J4VVc1T1UxSnJXbGxYYTFaM1ZXc3hSbGR1VmxaTlZscFFWVmQ0ZG1ReVNrWlZiRXBYVFd4S1RGWlhOWGRqTURWelZXdG9UMVpVYkZCV2FrRjRUbXhhV0UxVVVtaFdiRlkxVjJ0b1YxZEhTbFZTYm5CYVlsUkdURlV3V21GalZrWnlZMFpPVjFJemFFdFdiR1IzVWpKT2RGTnVTbXRTYTNCd1ZGY3hVMU14VmxWUmEyUnBZa1UxVjFaSGRFdFpWVEZJWlVWV1ZsWnRVbkpWTW5oR1pERktkRTVXVWxkV1ZGWkVWakp3UTJNeFNrZFNiR2hoVWxoQ1UxUlZWbUZrVmxWNFZtczVVazFyV2xoWmExcHZWREZrUjFkdGFGZE5SbHA2V2tkNFRtVkdTblZYYlVaT1VqTm9SbFpXV210aE1VNXpVbGhrVTJKVVZsVldiRlV4VVRGa2NWRnVUbE5TYTFwWlYydFdkMVZyTVVaWGJsWldUVlphVUZWWGVIWmtNa3BHVld4S1YwMXNTa3hXVmxKRFV6QXdlR0V6YkU1WFJUVnlWbXBHUzFKV1pIRlRiazVZVm10dk1sWnRkSE5YYlVwMFpVVlNWMkpIVWt4VWJGcEhZMVpHZEdGR1RrNWliV041VmxSR1YxbFdXWGhXV0doV1lURktVMWxYZEV0alJuQlhWbXQwYTFadFVucFpWVnBMV1ZVeGMxTnJiRnBXVjFFd1ZUSjRTbVF3TlZWVGJHaG9UV3hLV0ZZeWNFSk9WMDVZVTJwYVdHSkZTbTlXYTFaS1pERmFSbGRzU2s1U1dFNDBWVmMxUjFReFJYcFZiSEJXVFVad1NGa3dXazlPYkZKeldrZDRWMDFJUWtaWFZsSkRUVVpPYzFKWVpGTmlWRlpWVm14Vk1WRXhaSEZSYms1VFVtdGFXVmRyVm5kVmF6RkdWMjVXVmsxV1dsQlZWM2gyWkRKS1JsVnNTbGROYkVwTVZsWlNRMUl5U25OVWJGcFZZVEJ3YUZSV2FFTlhWbEp6Vld0T1dsWnRVa2RaTUdONFYwWmFSbUY2UmxwV1JWb3pWbXhWZUZkV1JuUmlSMnhvVFVkM01GWXlkRmRVTWtwMFVteGtWR0pIYUZCV2ExWkxZVVpaZDFadVRtbGlSbHBXVlRGU1YyRkZNVmxSYkZaV1ZqTlNlbGRXV210U2JVNUpWR3hTVjFacmIzbFdSekY2VGxkT1dGTnFXbGhpUlVwdlZtdFdTbVF4V2taWGF6VnJUV3hLUjFwVldsZFVNVVY2Vld4S1dsWXpRbE5aTW5oWFUwZEtSbE50YUZkWFJrcFVWMWR3UzJFeFRuTlNXR1JUWWxSV1ZWWnNWVEZSTVdSeFVXNU9VMUpyV2xsWGExWjNWV3N4UmxkdVZsWk5WbHBRVlZkNGRtUXlTa1pWYkVwWFRXeEtURlpXVWtOU01rcHpWR3hhVldFd05YRlZiVFZEWkRGV1dFMVVVbWhXTUhCNlZUSTFUMWRyTVhWWmVrWmFWbnBHUzFwV1dsZGtSMVpHWTBaa1UxSldjREpXYWtaaFZUSlNjMVJZWkdsU1ZrcFRWbXBLVTFNeFZsVlJhMlJwWWtVMVYxWkhkRXRaVlRGSVpVVldWbFp0VW5KVk1uaEdaREZLZEU1V1VsZFdWRlpFVmpKd1EyTXhTa2RTYkdoaFVsaENVMVJWVm1Ga1ZsVjRWbXM1VW1KSE9UTlphMVp6VlcxS2RHVkhPVmRpYmtKWFdrUkdUbVF4VW5Ka1JsSnBVbXR3TmxacVNqQlRNVnBYVTJ4b2JGSldjRlZXYkZwaFZVWmFWbGRyZEZOaVJuQlpXV3RXTkZac1dqWmlTRlpXVFZaYVVGVlhlSFprTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZWa05GSldWbGRhUjNSVVlrVldNMVZ0TURGV1JscFdUbFZPV0dGclNucFZhMXBIVjBad1JtTkdTazVTVm5BeFZqSjBWMkV5VFhsVmEyUnFVbXhLVUZZd2FFTmpSbFp4VW0xR2FrMVhkRE5XUnpBeFlUQXhTV0ZJYUZoV1JUVkVWV3RhZG1WVk9WaE9WbEpYVmxSV1JGWXljRU5qTVVwSFVteG9ZVkpZUWxSVVZscDNUbXhrV1dORmRGZGhlbFo1VmtjMVExVnNXWGxWYTNSV1ZrVktTRmx0ZUU5V2JGSnlVMjFHVGxJemFFWldWbHByWVRGT2MxUnJXbFJpVkd4aFdsZHpNVlF4VmpaUmF6bHBZbFZzTTFwRlZuZFZhekZHVjI1V1ZrMVdXbEJWVjNoMlpESktSbFZzU21saE1IQnZWMVphVjFNeVRsZGlTRVpVWWtVMWNGVnRNV3RPYkZWNVRWUlNhR0pIVWtoV01qVnJWMnN4Y1ZKc2FGcFdSVnBFVm14VmVGWnNjRWRqUm1ST1RXMWplVlpxU2pSVk1sSnpWRmhrYVZKV1NsTldha3BUVXpGV1ZWRnJaR2xpUlRWWFZrZDBTMWxWTVVobFJWWldWbTFTY2xVeWVFWmtNVXAwVGxaU1YxWXlhRlJXUkVaclVqRmtSazVXVmxKaE0yaFVWRmMxYm1WR1pGVlJiVGxYVFVSR1IxcEZWbE5aVmtwWFkwaENXbUpZYUV4WmVrWnlaVmRLUmxSc1RsZGlhMHBhVjJ4V2EySXlTa2RXV0dSVVlrWndZVlp0TVU5T1JteHlWbXBDVkZJd2NFcFdiWFIzVlRKR05sWnVjRmROVmtwTFZHeGtVMVl5VGtaaVJsWllVbFZ3VEZaWGRHcE9WVEZIVld0a1ZWZEhVbkpWYkdodlZsWlNWbFJxUWxaV01GcDRWbGN3TVZaSFNuUmxTR3hhVFVaYVVGa3dXa2RYUm5CR1kwWktUbEpXY0RGV1ZFWlhWREZHYzJJelpHbFNWa3BUVm1wS1UxTXhWbFZSYTJScFlrVTFWMVpIZEU5aE1rcFdUa1JHVldKSGFETlphMXByVW1zMVNWcEdhR2xTTURSNlYxZHdRMlJ0VmxkVmJsWlZZbFZhV0ZSVlduWk5WbFY1VGxoT2FtSkZNVE5aYTFaVFZXeFplVlZyZEZaV1JVcElXVzE0VDFac1VuSlRiVVpPVWpOb1JsWldXbXRoTVU1elVsaGtVMkpVVmxWV2JHUk9UVlp3V0dSRVVtdFdiRXA0Vm0weGQxUnJNVlpqU0hCWVZqTm9VRmx0TVV0ak1rNUpWVzFzVTJWc1duZFdWM0JIVjIxUmVGUnNXbGRXUmxwVlZXMTBjMDVHYkZWVFZFWlZVbXhhV1ZReFl6RldSbHBXVGxWT1dHRnJTbnBWYTFwSFYwWndSbU5HU2s1U1ZuQXhWbFJHVjFReFJuTmlNMlJwVWxaS1UxWnFTbE5aVm14elZtMUdUbFp0ZURCVVZscHJZa1phV1ZWclZscFdSVWwzVlRKNFJtUXhTblJPVmxKWFZsUldSRll5Y0VOak1VcEhVbXhvWVZKWVFsTlVWVlpoWkZaVmVGWnJPVkppUnpreldXdFdiMVpXV2tobFJUbFdWbTFOTVZsdGVFOVdiRkp5VTIxR1RsSXphRVpXVmxwcllURk9jMUpZWkZOaVZGWlZWbXhWTVZFeFpIRlJiazVUVW10YVdWZHJaRzlXTURGWVpVaFdXRll6UWxCV1J6RlRWMFpTY21GR1RtaGhNSEIyVmxab2QxWXlUWGhqUmxwaFUwVTFjMWxzV2t0VGJGcEhXWHBXVkdKVldsWlpWV2hMVm1zeFIxWlVSbGRTTTJoTVZtdFZOVll4V25OVGJXeFhVak5rTTFacVJtdGphelZZVW01U1ZGZElRbGhaYlhoaFkyeFdXV05HV2s1U2JrSlhXVlZqTVdGR1dsbFZiRlpXVm14S2FGVnJXblpsVlRsWVRsWlNWMVpVVmtSV01uQkRZekZLUjFKc2FHRlNXRUpUVkZWV1lXUldWWGhXYXpsU1lrYzVNMWxyVmxOVmJGbDVWV3QwVmxaRlNraFpiWGhQVm14U2NsTnRSazVpUlZreFYxWldiMUV5UmxkVFdHaFhZbFJXWVZsWGN6RlVNWEJIV2tVNVZGSnJjSGhWVnpGdlZXMVdjMWR1Y0ZoaVJscHlXWHBLVjJSR1ZuSmlSbFpYWlcxNFRGZFdXbE5pTWs1elZsaGtWMVpHV2xaWmExWjNWbFpSZUZkc1pGWmlWWEJXV1d0U1ExZEdXWGxqZWtaYVZucEdTMXBYZUdGa1ZscDBaRVpLYkdKR1ZqTldNbmhYWWpKS2RGSnNXbXRTYkZwd1ZGVm9VMU14VmxWUmEyUnBZa1UxVjFaSGRFdFpWVEZJWlVWV1ZsWnRVbkpWTW5oR1pERktkRTVXVWxkV1ZGWkVWakp3UTJNeFNrZFNiR2hoVWxoQ1UxUlZWbUZrVmxWNFZtczVVbUpIT1ROWmExWlRWVzFHY2xOdE9WZGlia0pJV1hwR1UxTkZOVlpQVjNCT1YwVktXbFp0TURGaE1WSkhWR3RrVTJKdFVsTlVWekUwVVRGa2NWRnVUbE5TYTFwWlYydFdkMVZyTVVaWGJsWldUVlphVUZWWGVIWmtNa3BHVld4S1YwMXNTa3hXVmxKRFVqSktjMVJzV2xWaE1IQm9WRlZrTkZKV1ZsZGFSM1JVWWtWV00xVnRNREZYYkZwMFZXMUdXR0ZyV25wVWJYTjRVbGRLUms1V1RsTmxiWGhPVmxSR1YxUXhSbk5pTTJScFVsWktVMVpxU2xOVE1WWlZVV3RrYVdKRk5WZFdSM1JMV1ZVeFNHVkZWbFpXYlZKeVZUSjRSbVF4U25ST1ZsSlhWbFJXUkZZeWNFTmpNVXBIVW14b1lWSllRbE5VVlZaaFpGWlZlRlp0Y0U5V01WcDVXbFZvVjFaWFJuTlhia1pWVmtWYVRGbDZSbk5qTVZKMFRsZHNhVk5GU1hkWFYzUnFUVmRHVjFOWWFGaFhSMUpWVm14YVZrMVdWWGRYYTNCc1VqQldOVlJzVmpSV2JGbzJZa2hXVmsxV1dsQlZWM2gyWkRKS1JsVnNTbGROYkVwTVZsWlNRMUl5U25OVWJGcFZZVEJ3YUZSVlpEUlNWbFpYV2tkMFZHSkZWak5WYlRBeFZrWmFWazVWVGxoaGEwcDZWV3RhUjFkR2NFWmpSa3BPVWxad01WWnFSbXBsUmtsNVZXeG9WR0pzU2xoWmJURTBWRlpXVlZOcVFsVlNhelZYVmtkMFMxbFZNVWhsUlZaV1ZtMVNjbFV5ZUVaa01VcDBUbFpTVjFaVVZrUldNbkJEWXpGS1IxSnNhR0ZTV0VKVFZGVldZV1JXVlhoV2F6bFNZa2M1TTFsclZsTlZiRmw1Vld0MFZsWkZTa3hhUlZwUFZteFdXVnBIUms1aE1uY3lWbFpqZUU1SFJsaFNiR2hoVTBaYVZsVXdaRFJXUmxWNFYyeEthMDFFUmxkV01uTjRWR3hhY21ORlZsaFdNMEpMV2xWa1IxWnRVWHBpUmxacFlraENlVlp0TlhkV2JWRjRWV3RvVDFaNmJGQlZha1poVWxaa1ZWUnJPVlJOUkVJMVZrYzFWMVpGTVZaT1ZVNVdaV3RLZWxWcldrZFhSbkJHWTBaS1RsSldjREZXVkVaWFZERkdjMkl6WkdsU1ZrcFRWbXBLVTFNeFZsVlJhMlJwWWtVMVYxWkhkRXRaVlRGSVpVVldWbFp0VW5KVk1uaEdaREZLZEU1V1VsZFdWRlpGVjFkNFYwNUhVbGRqUld4cFVqSm9XVlZ0ZEhkbGJGWTJVV3M1YUUxV2NFbFdSM1J2VmpKS1dXRkhhRlppVkVaeVdrWmFUbVZHU25WWGJVWk9Vak5vUmxaV1dtdGhNVTV6VWxoa1UySlVWbFZXYkZVeFVURmtjVkZ1VGxOU2ExcFpWMnRXZDFWck1VWlhibFpXVFZaYVVGVlhlSFprTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dtRlNia0p5Vm0weE1FNVdjRlpoUjBab1lYcEdlbFp0TldGV1JURldWMnBLVmsxdVVsQldWekZHWlZad1JtTkdTbGRsYlhneFZsUkdWMVF4Um5OaU0yUnBVbFpLVTFacVNsTlRNVlpWVVd0a2FXSkZOVmRXUjNSTFdWVXhTR1ZGVmxaV2JWSnlWVEo0Um1ReFNuUk9WbEpYVmxSV1JGWXljRU5qTVVwSFVteG9ZVkpZUWxSVVZWSkhUbFphVmxkc1RsTmlSVEV6V1d0V1UxVnNXWGxWYTNSV1ZrVktTRmx0ZUU5V2JGSnlVMjFHVGxJemFFWldWbHByWVRGT2MxSllaRk5pVkZaVlZteFZNVkV4WkhGUmJrNVRVbXRhV1ZkclZuZFZhekZHVjI1V1ZrMVdXbEJWVkVwU1pWWlNkVlZ0YkZSU2JIQjVWbFpTUzJFeVVsZFhiRlpTVjBkb1dGVnNaRFJUUmxWNVRWUlNhR0pIVWtoV01qVlBWMjFXY2s1V1VtRldNMUo2VldwR1UyUkhWa2hpUjJ4cFVsWndNVlpyVm1GVWJWRjVWV3RhYkZKc1dsQlZWRTVUVkVad1YyRkhPV3BXYXpFMFZXMDFZVmxWTVVobFJWWldWbTFTY2xVeWVFWmtNVXAwVGxaU1YxWlVWa1JXTW5CRFl6RktSMUpzYUdGU1dFSlRWRlZXWVdSV1ZYaFdhemxTWWtjNU0xbHJWbE5WYkZsNVZXMW9WMkZyTlhaVWJYaHJZekZXZFZkc1VrNVNNMmhHVmxaYWEyRXhUbk5TV0dSVFlsUldWVlpzVlRGUk1XUnhVVzVPVTFKcldsbFhhMVozVldzeFJsZHVWbFpOVmxwUVZWZDRkbVF5U2taVmJFcFhUV3hLVEZaV1VrTlNNa3B6Vkd4YVZXRXdjR2hVVjNoSFRsWnNWbUZGVG1oV2EydzBWbTB3TVZkdFJuSk9WVGxoVW0xU1VGVXdXa3RqVmtaMFlVWktiR0pHY0RaV01uaFhZVEpOZVZadVVsWmhNbmhXVm01d2MxTXhiRmRWYlRscVlrWldNMVpzVWxkV1YwcEdZMFpXVlUxV2NGaFdWekZMVmxkS1JWRnNhRmROYmsxNFYxWmtOR014WkVoV2EyeFZZWHBHY0Zsc1pHcGtNV1J6Vm1zNVZHSlZOVWRVTVdNeFlWVXhkRlZyZEZaV1JVcElXVzE0VDFac1VuSlRiVVpPVWpOb1JsWldXbXRoTVU1elVsaGtVMkpVVmxWV2JGVXhVVEZrY1ZGdVRsTlNhMXBaVjJ0V2QxVnJNVVpYYmxaV1RWWmFVRlZYZUhaa01rcEdWV3hLVjAxc1NreFdWbEpEVTIxUmVHSkdaRnBOTW1od1ZXeG9iMDFXV2toT1ZUbGFWbXhzTkZZeWNFOVdSVEZJWVVaT1drMUdXbEJaTUZwSFYwWndSbU5HU2s1U1ZuQXhWbFJHVjFReFJuTmlNMlJwVWxaS1UxWnFTbE5UTVZaVlVXdGthV0pGTlZkV1IzUkxXVlV4U0dWRlZsWldiVkp5VlRKNFJtUXhTblJPVmxKWFZsUldSRll5Y0VOak1VcEhVbXhvWVZKWVFsUmFWekV6VFd4YVJsbDZSbFZOUkZaWlZrWm9kMVp0U2xsaFNFSlhWa1Z3Y2xwR1dtdGtSVEZaVkcxc2FWWllRa3BXYlRGM1VURk9jMU5zVm1sU1YzaFhXVmQwWVdWV2JIUmtSRUpXWWxWc05WZHJWbmRWYXpGR1YyNVdWazFXV2xCVlYzaDJaREpLUmxWc1NsZE5iRXBNVmxaU1ExSXlTbk5VYkZwVllUQndhRlJWWkRSU1ZsWlhXa2QwVkdKRlZqTlZiVEF4VmtaYVZrNVZUbGhoYTBwNlZXdGFSMWRHY0VaalJrcE9VbGhDTTFacVJtRmhhekZZVld4a2FsSnRlRlZXYm5CelZGWmFWMWw2Vm1saVJUVlhWa2QwUzFsVk1VaGxSVlpXVm0xU2NsVXllRVprTVVwMFRsWlNWMVpVVmtSV01uQkRZekZLUjFKc2FHRlNXRUpUVkZWV1lXUldWWGhXYXpsU1lrYzVNMWxyVmxOVmJGbDVWV3QwVmxaRlNraFpiWGhQVm14U2NsUnRiRmRXUlZvelZsWmFVMk14VG5OVGFscHBVa1UxV1ZsclpFNWtNV3h4VVc1a1QxWlViRWxhUlZwVFZURmFTR1ZHUWxkV00yaFBWR3hhWVZZeFNuVlZiRUpZVW10d2FGZFdXbE5qTWs1WFlraEdWV0pIVW5KV2FrWkxVbFpTYzFWc1RtbFNhelZKVjJ0b1YxWldTbFpPV0VwVlZrVktNMVJzWkVaa01sSkdZMFpLVGxKV2NERldWRVpYVkRGR2MySXpaR2xTVmtwVFZtcEtVMU14VmxWUmEyUnBZa1UxVjFaSGRFdFpWVEZJWlVWV1ZsWnRVbkpWTW5oR1pERktkRTVXVWxkV1ZGWkVWakp3UTJNeFNrZFNiR2hoVWxoQ1UxUlZWbUZrVmxsNVRWaGtWR0pXU2xsV1ZtaDNWa2RLY2xOdVNsWmhhMXBZV2tkNFQyUlhTa2hqUjNCVFZsUldNMVpXV210aE1VNXpVbGhrVTJKVVZsVldiRlV4VVRGa2NWRnVUbE5TYTFwWlYydFdkMVZyTVVaWGJsWldUVlphVUZWWGVIWmtNa3BHVld4S1YwMXNTa3hXVmxKRFVqSktjMVJzV2xWaE1IQm9WRlZrTkZKV1ZsZGFSM1JVWWtWc05GbHJVbGRXVmtvMlVteENXbVZyY0V0YVYzaFRaRWRXUm1WR1NrNWliRXBPVmxaU1IxSXlUbk5VYmtwcFVsWktVMVpxU2xOVE1WWlZVV3RrYVdKRlZqVlphMVpMV1ZVeFNHVkZWbFpXYlZKeVZUSjRSbVF4U25ST1ZsSlhWbFJXUkZZeWNFTmpNVXBIVW14b1lWSllRbE5VVlZaaFpGWlZlRlpyT1ZKaVJ6a3pXV3RXVTFWc1dYbFZhM1JXVmtWS1NGbHRlRTlXYkZKeVUyMUdUbEl6YUVwV2ExcHZVekZXVjFkcldsZGhNMmhWVm14Vk1WRXhaSEZSYms1VFVtdGFXVmRyVm5kVmF6RkdWMjVXVmsxV1dsQlZWM2gyWkRKS1JsVnNTbGROYkVwTVZsWlNRMUl5U25OVWJGcFZZVEJ3YUZSVlpEUlNWbFpYV2tkMFZHSkZWak5WYlRBeFZrWmFWazVWVGxoaGEzQlFWVEZhVDJSV1JuUmlSMnhwVWxadmVWWlVTbmRSTVZGNVVtdG9WR0V5YUhOVk1HaERVekZXYzFWclpHbE5WMUo1VjJ0YVlWbFZNVlpUYm1SVlZsZE5lRlpHV2twa01ERlpXa1pLVG1KWWFFUldNbkJEWXpGS1IxSnNhR0ZTV0VKVFZGVldZV1JXVlhoV2F6bFNZa2M1TTFsclZsTlZiRmw1Vld0MFZsWkZTa2haYlhoUFZteFNjbE50Ums1U00yaEdWbFphYTJFeFRuTlNXR1JUWWxSV1ZWWnNWVEZSTVdSeFVXNU9WRlpyV2pGWmEyUnZWakpXYzFacVRsWmxhMHBRV1ZSR1NtVldUbGxqUmxKWFRXeEtWRlpHWkRCWlYxWnpZa2hLYUZKVVZtaFVWM1JoVjJ4YVYxcEhkRmRXYkd3elZqRlNSMVpHV2xoVVdHaGhVbnBHVkZWcldrZGpWbEowWWtVMVRsTkZTVEZXVkVaWFlqRkZlVlpzYUZSWFNFSlRXV3hvYjJOV2JITmhSelZPVm1zMVYxZHJhRTlVYkVsM1RrUkdWbFl6YUdoWlZtUkxWakZPZFZSc2NFNWlXR2hGVmxkNFlXUXhaRmRhU0ZKc1VqSjRWVlZzVm5aa01WbDVaVWR3VGxaVVJrZFpNRkpYWVVVeFNWVnJkRlpXUlVwSVdXMTRUMVpzVW5KVGJVWk9Vak5vUmxaV1dtdGhNVTV6VWxoa1UySlVWbFZXYkZVeFVURmtjVkZ1VGxSU2JIQXhWa2N4ZDFSdFNrZFhibFpYVWtWd2NscEhlSFprTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZWa05GSldWbGRhUjNSVVlrVldNMVZ0TURGV1JscFdUbFZPV0dGcmNFdGFWM2hUVjFaYWRHTkZOVTVpYldONVZqSjBWMkV4V1hsVmExcHJVbFpLYUZWdWNFZGlNVnB4VTJ4T2JHSkhVbnBaVlZwTFdWVXhWMUpxVGxoaE1WcDJWakJhVm1WV1VuVmFSa3BPWWxob1JGWXljRU5qTVVwSFVteG9ZVkpZUWxOVVZWWmhaRlpWZUZack9WSmlSemt6V1d0V1UxVnNXWGxWYTNSV1ZrVktTRmx0ZUU5V2JGSnlWRzFvVjJKWWFGcFdSM2h2VmpGc1YxcEZXbWxUUm5CVlZGWldZVTFzWkhGUmJrNVRVbXRhV1ZkclZuZFZhekZHVjI1V1ZrMVdXbEJWVjNoMlpESktSbFZzU2xkTmJFcE1WbFpTUTFJeVNuTlViRnBWWVRCd2FGUlhjekZUYkZWNVRsVk9hRll3Y0hwVmJUVmhWa2RHY2xkc1VsWldSWEJMV2xaVmVGZEhTa1pqUms1WFVteHNOVll5ZEZkVU1VVjRWbGhzVm1KSGFGQldNRnBoWWpGYWRXTkdaR3RXYXpVeFdXdG9TMVpGTVVobFJWWldWbTFTY2xVeWVFWmtNVXAwVGxaU1YxWlVWa1JXTW5CRFl6RktSMUpzYUdGU1dFSlRWRlZXWVdSV1ZYaFdhemxTWWtjNU0xbHJWbTlWUm1SSlVXczFXbUpZVFhkVVZscHpUbXhTYzFSdGJGTk5TRUpXVmpKd1NrMVdiRmhUYkdoc1UwWmFZVmxVU2xOWFJsSldWbTVPVTAxV1dubFdSekZ6VkcxR2NsZHVaRlpOVmxwWFZGWmtVMlJHVm5KVmJFcHBVbFJXZVZadE5YZFdNREZYWWtaa1dtVnJXbkJaVkVvMFVsWlplRmt6YUZSaVJXdzBWakZTUTFkc1duUmhSazVhWWxoUmQxWlhNVXBsVm5CR1kwWktUbEpXY0RGV1ZFWlhWREZHYzJJelpHbFNWa3BUVm1wS1UxTXhWbFZSYTJScFlrVTFWMVpIZEV0WlZURklaVVZXVmxadFVuSlpWM2hQVW0xT1NWcEdjR2xXUmxwVVYxZHdRMlJ0VVhsVmEyaHNVakJhV1ZWc1ZtRmtWbHAwWkVaa1ZFMXNTakJWTW5odlZrWlplVlZzWkZwaVdHaG9WRlphYzJSRk1WbFViWFJYWW10RmVGWldZekZSTWtaWVVteGFWR0ZyY0doVmJHUlRaR3hzY2xwRk9XcFNhMW94V1RCa1IxZEdTbFZXVkVwWVZteHdjVlJzWkZOV2JVNUZWbTFvVGxOR1NreFdWbEpEVWpKS2MxUnNXbFZoTUhCb1ZGVmtORkpXVmxkYVIzUlVZa1ZXTTFWdE1ERldSbHBXVGxWT1dHRnJTbnBWYTFwSFYwWndSbU5HVGs1aWJXZDNWbFJHVjJGck5WaFdia3BzVTBaYVUxbHNaRzlqYkZaeFUyMTBUbFp0VW5wWlZXTTFZV3hKZDAxVVdsZFdlbFl6VmtWYVJtUXlTa1ZUYkZKb1RWWndNbFpzVm1GVk1WcHpWMnhzV0dKSFVsUldiR2hDWlZaa1dHVkhkRlJpVlZwWFdrVmFWMkZWTVVsVmEzUldWa1ZLU0ZsdGVFOVdiRkp5VTIxR1RsSXphRVpXVmxwcllURk9jMUpZWkZOaVZGWlZWbXhWTVZFeFpIRlJiazVUVW10YVdWZHJWbmRWYXpGR1YyNVdWazFXV25aVlZFcEhVMFpTV1dOR1ZsZFhSa3BNVmxaU1ExSXlTbk5VYkZwVllUQndhRlJWWkRSU1ZsWlhXa2QwVkdKRlZqTlZiVEF4VmtaYVZrNVZUbGhoYTBwNlZXdGFSMWRHY0VaalJrNU9WbTVCTWxZeGFIZFRNVnB5VGxoS1ZXSnJTbE5XYWtwVFV6RldWVkZyWkdsaVJUVlhWa2QwUzFsVk1VaGxSVlpXVm0xU2NsVXllRVprTVVwMFRsWlNWMVpVVmtSV01uQkRZekZLUjFKc2FHRlNXRUpUVkZWV2RtVldaRlZVYmtwT1ZqRmFNRlp0ZUhOV1YwWnlVMjFvVjJKdVFrUmFSM2hQVjBVeFZrOVhhRTVUUlVvelZtcEpkMDFYUmtkYVJXUlRZbFJXV1ZaclZuWk5SbkJJVFZWMGExSnNjRmxYYTJSdlZrWktjbUpFVGxoV1JVcDJWa2R6TVdOdFZrVldiRUpYWld4YWRsWnFRbUZUTWxKelkwVmtZVkpZUW5KV2JURXdUbFpSZUdGR1RsVldWRVpZVlRJMVlWZEhTa2RqUmtKaFVrVmFNMVl3V21Ga1IxSkhZVVpLYkdKWWFGaFdiRnBxWkRBMVdGVnJaR2xUUlVwVlZqQldTMUpXYkZkV2EyUnBZa1UxVjFaSGRFdFpWVEZJWlVWV1ZsWnRVbkpYVmxwYVpXMUdSVmRzYUdsU1ZGWkVWa2N4TUZReVRrZFNiR2hoVWxoQ1UxUlZWbUZrVmxWNFZtczVVbUpIT1ROWmExWlRWV3haZVZWcmRGWldSVXBNVkZSR2NtVlZNVmxVYlhSWFRWVndSbFl5Y0V0ak1WWnlUVmhHYVZORmNGbFphMVV4VWtaYVZWSnVaRmhXYTNCNFZXMHhiMWRHU2xsUmJuQlhUVzVTVUZVeU1VOVNiRkoxVld4a2FHSkZjR2hXUm1RMFdWVXdlR05GV2xWaE1EVldWVzAxUTFkc2JISmFTRTVvVmxSR2VWWXljRmRYUjBWNFYyNXdZVkp0VWxSVk1GcGhaRmRLU0dOSGJHbFNiVGsyVmpKMFYxVXlVbk5VV0dSVllrZG9XVlpxU2xOVmJGcFZVV3QwVG1KSGRETlhhMXByWVRGYVdWVnJWbGhXUlRWb1ZYcEdTMWRIUmtkU2JHUlRZa1p3V0ZkclpEUlpWa3B6Vkc1V1dHSlhlRmhVVldRelpWWlplRlZyY0U5V1ZFWlpWVEkxVjFac1pFZFhiazVXVFVkU2RWUlZXazlrVjBwRlZHMXNhVlpyYTNoV01WSlBVVEZPYzFKc2FGQldXRkpaV1d4U1FrMVdjRmRXYms1VVZtMDVOVmRyWkc5V01sWnpVMjVXV0ZaRmJEUlZha3BUVmpKSmVtSkdaRmROYkVwT1ZsZDBZVkl3TUhoVmJHUlZZbXR3VUZsVVFURmtNVlpYV2tkMFZHSkZWak5WYlRBeFZrWmFWazVWVGxoaGEwcDZWV3RhUjFkR2NFWmpSazVPVmpOa05GWXlkRk5VTVUxNVZHdG9WbUV5YUZoV2JuQnpWRVpTVjFaVVJrNU5WMUo2VjJ0YWEyRkZNVmhWYTJoaFZsZG9XRlY2U2xkWFIxSkdaVVpLVGxZeFNtaFhhMXBoWTIxV1dGWnJiRmhpV0VKUFdXdGFZVTFzVmpaU2EyUnJZa1UxTUZVeGFIZFdWbVJIVjI1R1ZWWkZiekJVYlhoM1VteHdSMXBIZEZOWFJrcEdWbFJKZUU1SFNrZFRXR3hyVFRKU1ZWWnNWVEZaVm14elZtNU9WRkp0VWpGVlZ6RkhWRzFLZEdGSWNGaGhNVnBRVlZSR1lWZEdTbkpoUms1cFlrWndkbGRzV2xkVE1XeFhZa2hHVldKR2NHOVdiR2hUVlRGV1IxVllaR2xoTTFKVldWaHZkMkpyZEZSaGVqQnVTMU5yUFNjcEtRPT0nKSk='))'))
